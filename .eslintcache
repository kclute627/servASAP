[{"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\index.js":"1","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\App.js":"2","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\reportWebVitals.js":"3","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\aws-exports.js":"4","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Dashboard.js":"5","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Nav.js":"6","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Account.js":"7","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Reports.js":"8","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\AddJob.js":"9","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\Jobs.js":"10","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Reducer\\navReducer.js":"11","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\AddJobForm.js":"12","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Utils\\utils.js":"13","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\InvoiceSection.js":"14","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\JobBtn.js":"15","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\PlacesAutocomplete.js":"16","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\FileDropForm.js":"17","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\store.js":"18","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Reducer\\addjobFormReducer.js":"19","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\constants\\addJobConstants.js":"20","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Actions\\addjobActions.js":"21"},{"size":803,"mtime":1613411051652,"results":"22","hashOfConfig":"23"},{"size":1169,"mtime":1612923616436,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1606248828867,"results":"25","hashOfConfig":"23"},{"size":831,"mtime":1613596953535,"results":"26","hashOfConfig":"23"},{"size":307,"mtime":1612799693868,"results":"27","hashOfConfig":"23"},{"size":2023,"mtime":1612213702814,"results":"28","hashOfConfig":"23"},{"size":263,"mtime":1612208421887,"results":"29","hashOfConfig":"23"},{"size":242,"mtime":1612208458675,"results":"30","hashOfConfig":"23"},{"size":371,"mtime":1612276353600,"results":"31","hashOfConfig":"23"},{"size":738,"mtime":1612208410794,"results":"32","hashOfConfig":"23"},{"size":601,"mtime":1612198189500,"results":"33","hashOfConfig":"23"},{"size":8450,"mtime":1613496651807,"results":"34","hashOfConfig":"23"},{"size":775,"mtime":1612198189504,"results":"35","hashOfConfig":"23"},{"size":8610,"mtime":1613530862613,"results":"36","hashOfConfig":"23"},{"size":599,"mtime":1612802487020,"results":"37","hashOfConfig":"23"},{"size":11044,"mtime":1613503838723,"results":"38","hashOfConfig":"23"},{"size":5455,"mtime":1613596263785,"results":"39","hashOfConfig":"23"},{"size":460,"mtime":1613492726267,"results":"40","hashOfConfig":"23"},{"size":4817,"mtime":1613532425507,"results":"41","hashOfConfig":"23"},{"size":1902,"mtime":1613516688651,"results":"42","hashOfConfig":"23"},{"size":417,"mtime":1613414868636,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"kfvyn0",{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"47"},"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\index.js",["96","97","98"],"import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/main.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport Amplify from \"aws-amplify\";\nimport config from \"./aws-exports\";\nimport { alpha } from \"@material-ui/core/styles\";\nimport { Helmet } from \"react-helmet\";\n\nAmplify.configure(config);\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["99","100"],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\App.js",["101"],"import React, { useReducer, useEffect } from \"react\";\r\nimport Dashboard from \"./Components/Dashboard\";\r\nimport Nav from \"./Components/Nav\";\r\nimport Jobs from \"./Components/Jobs/Jobs\";\r\nimport AddJob from \"./Components/Jobs/AddJob\";\r\nimport Account from \"./Components/Account\";\r\nimport Reports from \"./Components/Reports\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { reducer, initialState } from \"./Reducer/navReducer\";\r\n\r\nconst App = () => {\r\n  const [dashPage, dispatch] = useReducer(reducer, initialState);\r\n  console.log(dashPage.currentPage);\r\n\r\n  useEffect(() => {\r\n   \r\n  }, []); \r\n\r\n  const { currentPage } = dashPage;\r\n  return (\r\n    <Router>\r\n      <div className='App'>\r\n        <Nav dispatch={dispatch} />\r\n\r\n        <component>\r\n          <Route exact path='/' component={Dashboard} />\r\n          <Route exact path='/jobs' component={Jobs} />\r\n          <Route exact path='/jobs/add' component={AddJob} />\r\n          <Route exact path='/account' component={Account} />\r\n          <Route exact path='/reports' component={Reports} />\r\n        </component>\r\n      </div>{\" \"}\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\reportWebVitals.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\aws-exports.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Dashboard.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Nav.js",["102","103"],"import React, { useState, useReducer } from \"react\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { grey, purple } from \"@material-ui/core/colors\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport logo from \"../Assets/logo-white.png\";\r\n\r\nimport { navList } from \"../Utils/utils\";\r\n\r\nconst Nav = ({ dispatch }) => {\r\n  const [open, openHandler] = useState(true);\r\n\r\n  return (\r\n    <div className={!open ? \"nav__drawer open\" : \"nav__drawer\"}>\r\n      <div className='nav__drawer-top'>\r\n        <Link to='/'>\r\n          <Avatar\r\n            alt='logo'\r\n            src={logo}\r\n            className={open ? \"avatar-open\" : \"avatar\"}\r\n          />\r\n        </Link>\r\n\r\n        <span></span>\r\n      </div>\r\n      <div className={open ? \"nav__drawer-middle\" : \"nav__drawer-middle mg\"}>\r\n        {navList.map((link) => (\r\n          <Link to={link.link}>\r\n            <li\r\n              className='nav__drawer-items'\r\n              onClick={() => dispatch({ type: `${link.type}` })}\r\n            >\r\n              <SVG\r\n                className='nav__drawer-items-icon'\r\n                src={link.icon}\r\n                title=' '\r\n              />\r\n              {open ? (\r\n                <div className='nav__drawer-items-text'>{link.text}</div>\r\n              ) : null}\r\n            </li>{\" \"}\r\n          </Link>\r\n        ))}\r\n      </div>\r\n      <div className='nav__drawer-bottom'>\r\n        <div className='icon'>\r\n          <IconButton onClick={() => openHandler(!open)}>\r\n            {open ? (\r\n              <ChevronLeftIcon fontSize='large' style={{ color: grey[100] }} />\r\n            ) : (\r\n              <ChevronRightIcon fontSize='large' style={{ color: grey[100] }} />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Account.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Reports.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\AddJob.js",["104"],"import React, { useState, useEffect } from \"react\";\r\nimport AddJobForm from \"./AddJobForm\";\r\n\r\nconst AddJob = () => {\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  return (\r\n    <div className=\"addjob\">\r\n      <div className=\"addjob-top\">\r\n        <h1>ADD A JOB</h1>\r\n      </div>\r\n\r\n      <AddJobForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddJob;\r\n","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\Jobs.js",["105"],"import React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Jobs = () => {\r\n  useEffect(()=> {\r\n    \r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  \r\n  return (\r\n    <div className=\"jobs\">\r\n      JOBS\r\n      <Link  to=\"/jobs/add\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          endIcon={<CloudUploadIcon />}\r\n          style={{ backgroundColor: \"#123c69\" }}\r\n          className=\"jobs__button\"\r\n         \r\n        >\r\n          Add A Job\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jobs;\r\n","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Reducer\\navReducer.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\AddJobForm.js",["106","107","108","109"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  ADD_JOB_FORM_CASEDEF,\r\n  ADD_JOB_FORM_CASENUMBER,\r\n  ADD_JOB_FORM_CASEPLANTIFF,\r\n  ADD_JOB_FORM_CLIENTNAME,\r\n  ADD_JOB_FORM_CLIENTREF,\r\n  ADD_JOB_FORM_COURTDATE,\r\n  ADD_JOB_FORM_COURTNAME,\r\n  ADD_JOB_FORM_DUEDATE,\r\n  ADD_JOB_FORM_INSTRUCTIONS,\r\n  ADD_JOB_FORM_PERSONSERVED,\r\n  ADD_JOB_FORM_RUSH,\r\n  ADD_JOB_FORM_SERVER,\r\n} from \"../../constants/addJobConstants\";\r\nimport \"date-fns\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FileDropForm from \"./FileDropForm\";\r\n\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport InvoiceSection from \"./InvoiceSection\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport PlacesAutocomplete from \"./PlacesAutocomplete\";\r\nimport { setFormData } from \"../../Actions/addjobActions\";\r\n\r\nconst servers = [\r\n  {\r\n    name: \"Blank\",\r\n    lic: \"\",\r\n  },\r\n\r\n  {\r\n    name: \"Kyle Clutter\",\r\n    lic: \"115-009722\",\r\n  },\r\n];\r\nconst court = [\r\n  {\r\n    name: \"Cook County Civil Court\",\r\n  },\r\n  {\r\n    name: \"Blank\",\r\n    lic: \"\",\r\n  },\r\n];\r\n\r\nconst AddJobForm = (props) => {\r\n  \r\n  const dispatch = useDispatch();\r\n  let formData = useSelector((state) => state.setFormData)\r\n\r\n\r\n\r\n useEffect(() => {\r\n  ;\r\n  \r\n }, [])\r\n\r\n  const handleChange = (event) => {\r\n    dispatch(setFormData(event.target.value, event.target.name));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className='form-group'>\r\n        <div className='form-group-1'>\r\n          <h3>Client Information </h3>\r\n          <div className='form-group-span'></div>\r\n          <div className='form-item'>\r\n            <TextField\r\n              id='outlined-basic'\r\n              autoComplete='new-password'\r\n              label='Company Name'\r\n              name={ADD_JOB_FORM_CLIENTNAME}  \r\n              onChange={handleChange}\r\n              variant='outlined'\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </div>\r\n\r\n          <div className='form-item'>\r\n            <TextField\r\n              id='outlined-basic'\r\n              label='Client Ref Number'\r\n              variant='outlined'\r\n              style={{ width: \"100%\" }}\r\n              name={ADD_JOB_FORM_CLIENTREF}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n\r\n          <h3>Process Server </h3>\r\n          <div className='form-group-span'></div>\r\n          <div className='form-item'>\r\n            <Autocomplete\r\n              freeSolo\r\n              id='outlined-basic'\r\n              label='Process Server'\r\n              autoComplete='new-password'\r\n              variant='outlined'\r\n              options={servers.map((option) => option.name)}\r\n              style={{ width: \"100%\" }}\r\n              name='Servers'\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label='Process Server'\r\n                  margin='normal'\r\n                  variant='outlined'\r\n                  name={ADD_JOB_FORM_SERVER}\r\n                  onChange={handleChange}\r\n                  onSelect={handleChange}\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <h3>Case Information </h3>\r\n            <div className='form-group-span'></div>\r\n            <div className='form-item'>\r\n              <TextField\r\n                id='outlined-basic'\r\n                label='Case Number'\r\n                variant='outlined'\r\n                style={{ width: \"100%\" }}\r\n                name={ADD_JOB_FORM_CASENUMBER}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            <div className='form-item'>\r\n              <TextField\r\n                id='outlined-basic'\r\n                label='Plantiff'\r\n                variant='outlined'\r\n                style={{ width: \"100%\" }}\r\n                name={ADD_JOB_FORM_CASEPLANTIFF}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            <div className='form-item'>\r\n              <TextField\r\n                id='outlined-basic'\r\n                label='Defendant'\r\n                autoComplete='new-password'\r\n                variant='outlined'\r\n                style={{ width: \"100%\" }}\r\n                name={ADD_JOB_FORM_CASEDEF}\r\n                onChange={handleChange} \r\n              />\r\n            </div>\r\n            <div className='form-item'>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  format='MM/dd/yyyy'\r\n                  autoOk\r\n                  variant='inline'\r\n                  label='Court Date'\r\n                  autoComplete='new-password'\r\n                  value={formData.courtDate}\r\n                  onChange={(newValue) => {\r\n                    dispatch(setFormData(newValue, ADD_JOB_FORM_COURTDATE));\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </div>\r\n\r\n            <div className='form-item'>\r\n              {/*todo --- try to find an autocomplete solution where courts are loaded from the user / company profile  */}\r\n\r\n              <TextField\r\n                id='outlined-basic'\r\n                label='Court Name'\r\n                variant='outlined'\r\n                autoComplete='new-password'\r\n                name='court'\r\n                select\r\n                style={{ width: \"100%\" }}\r\n                SelectProps={{\r\n                  native: true,\r\n                }}\r\n                name={ADD_JOB_FORM_COURTNAME}\r\n                onChange={handleChange}\r\n              >\r\n                {court.map((option) => (\r\n                  <option key={option.name} value={option.name}>\r\n                    {option.name}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n            </div>\r\n          </div>\r\n          <h3>Server Instructions </h3>\r\n          <div className='form-group-span'></div>\r\n\r\n          <div className='form-item'>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={formData.rush}\r\n                  onChange={() =>\r\n                    dispatch(setFormData(!formData.rush, ADD_JOB_FORM_RUSH))\r\n                  }\r\n                  name='rush'\r\n                  color='primary'\r\n                />\r\n              }\r\n              label='RUSH'\r\n            />\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                format='MM/dd/yyyy'\r\n                autoOk\r\n                variant='inline' \r\n                label='Due Date'\r\n                value={formData.dueDate}\r\n                style={{ width: \"35%\" }}\r\n                onChange={(newValue) => {\r\n                  dispatch(setFormData(newValue, ADD_JOB_FORM_DUEDATE));\r\n                }}\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </div>\r\n          <div className='form-item'>\r\n            {/* todo - Put Chips in Like I did for the description of the documents being served */}\r\n            <textarea\r\n              name=''\r\n              id=''\r\n              placeholder='Process Server Instructions'\r\n              className='form-textarea'\r\n              value={formData.serverInstructions}\r\n              name={ADD_JOB_FORM_INSTRUCTIONS}\r\n              onChange={handleChange}\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n        <h3> Person / Company Being Served </h3>\r\n        <div className='form-group-span'></div>\r\n        <div className='form-item'>\r\n          <TextField\r\n            id='outlined-basic'\r\n            label='Name'\r\n            variant='outlined'\r\n            autoComplete='new-password'\r\n            style={{ width: \"100%\" }}\r\n            name={ADD_JOB_FORM_PERSONSERVED}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <h3> Service Address </h3>\r\n        <div className='form-group-span'></div>\r\n        <div className='form-item'>\r\n          <PlacesAutocomplete \r\n        \r\n          />\r\n        </div>\r\n\r\n        <FileDropForm />\r\n      </form>\r\n      <InvoiceSection />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddJobForm;\r\n","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Utils\\utils.js",["110","111"],"import account from '../Assets/account_circle.svg';\r\nimport dashboard from '../Assets/equalizer.svg'\r\nimport flag from '../Assets/flag.svg'\r\nimport clip from '../Assets/clipboard-text.svg'\r\nimport jobs from '../Assets/paperplane.svg'\r\nimport folder from '../Assets/folder.svg';\r\n\r\n\r\nexport const navList = [\r\n    {\r\n        link: \"/\",\r\n        type: \"dashboard\",\r\n        text: \"Dashboard\",\r\n        icon: clip\r\n      },\r\n      {\r\n        link: \"/jobs\",\r\n        type: \"jobs\",\r\n        text: \"Jobs\",\r\n        icon: jobs\r\n      },\r\n      {\r\n        link: \"/reports\",\r\n        type: \"reports\",\r\n        text: \"Reports\",\r\n        icon: folder\r\n      },\r\n      {\r\n        link: \"/account\",\r\n        type: \"account\",\r\n        text: \"Account\",\r\n        icon: account\r\n      },\r\n\r\n]","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\InvoiceSection.js",["112","113","114","115","116"],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\JobBtn.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\PlacesAutocomplete.js",["117","118","119","120","121"],"import React, { useState, useEffect } from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setFormData } from \"../../Actions/addjobActions\";\r\nimport {ADD_JOB_FORM_SERVICEADDRESS, ADD_JOB_FORM_SERVICEADDRESS_ADDRESS} from '../../constants/addJobConstants';\r\n\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\n\r\nconst PlacesAutocompleteComponent = (props) => {\r\n\r\n\r\n  let formData = useSelector((state) => state.setFormData)\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const [addAddressBtn, setAddAddressBtn] = useState(false);\r\n  const [address, setAddress] = useState({\r\n    fullAddress: \"\",\r\n    street: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    suite: \"\",\r\n  });\r\n\r\n  const [altAddress, setAltAddress] = useState({\r\n    fullAddress: \"\",\r\n    street: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    suite: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    let updatedAddress = {...formData.serviceAddress, [e.target.name]: e.target.value }\r\n    dispatch(setFormData(updatedAddress, ADD_JOB_FORM_SERVICEADDRESS_ADDRESS))\r\n   \r\n  };\r\n\r\n  //updated all the alt Address INFORMATION\r\n  const handleAutoChange = (fullAddress) => {\r\n    dispatch(setFormData(fullAddress, ADD_JOB_FORM_SERVICEADDRESS))\r\n  };\r\n  const handleAltAutoChange = (fullAddress) => {\r\n\r\n    dispatch(setFormData(fullAddress, ADD_JOB_FORM_SERVICEADDRESS))\r\n    \r\n  };\r\n\r\n  const handleAltSelect = async (newAddress) => {\r\n    try {\r\n      const results = await geocodeByAddress(newAddress);\r\n      const latLang = await getLatLng(results[0]);\r\n\r\n     \r\n\r\n      const resultsArr = results[0].formatted_address.split(\",\");\r\n     \r\n\r\n      setAltAddress({\r\n        ...address,\r\n        street: resultsArr[0],\r\n        city: resultsArr[1],\r\n        state: resultsArr[2].split(\" \")[1],\r\n        zip: resultsArr[2].split(\" \")[2],\r\n\r\n        fullAddress: results[0].formatted_address,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleSelect = async (newAddress) => {\r\n    try {\r\n      const results = await geocodeByAddress(newAddress);\r\n      const latLang = await getLatLng(results[0]);\r\n\r\n    \r\n\r\n      const resultsArr = results[0].formatted_address.split(\",\");\r\n    \r\n\r\n      let updatedAddress = {\r\n        \r\n        street: resultsArr[0],\r\n        city: resultsArr[1],\r\n        state: resultsArr[2].split(\" \")[1],\r\n        zip: resultsArr[2].split(\" \")[2],\r\n\r\n        fullServiceAddress: results[0].formatted_address,\r\n        lat: latLang.lat,\r\n        lng: latLang.lng,\r\n      }; \r\n\r\n      dispatch(setFormData(updatedAddress, ADD_JOB_FORM_SERVICEADDRESS_ADDRESS))\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const btnClickHandler = (e) => {\r\n    e.preventDefault();\r\n    setAddAddressBtn(!addAddressBtn);\r\n    setAltAddress({\r\n      fullAddress: \"\",\r\n      street: \"\",\r\n      city: \"\",\r\n      state: \"\",\r\n      zip: \"\",\r\n      suite: \"\",\r\n    });\r\n  };\r\n\r\n  const { fullServiceAddress, city, street, zip, state, suite } = formData.serviceAddress;\r\n   \r\n  const addtionalAddress = (\r\n    <div>\r\n      <h4 className='h4'>Alternative Address</h4>\r\n      <PlacesAutocomplete\r\n        value={altAddress.fullAddress}\r\n        onChange={handleAltAutoChange}\r\n        onSelect={handleAltSelect}\r\n        style={{ width: \"100%\" }}\r\n        name='fullAddress'\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\r\n          return (\r\n            <div>\r\n              <TextField\r\n                label='Service Address'\r\n                style={{ width: \"100%\" }}\r\n                autoComplete='new-password'\r\n                name='fullAddress'\r\n                {...getInputProps({\r\n                  placeholder: \"Start Typing Service Address\",\r\n                  className: \"location-search-input\",\r\n                  autoComplete: \"new-password\",\r\n                  name: \"fullAddress\",\r\n                })}\r\n              />\r\n\r\n              <div className='autocomplete-dropdown-container'>\r\n                {loading && <div>... Loading </div>}\r\n                {suggestions.map((suggestion) => {\r\n                  const className = suggestion.active\r\n                    ? \"suggestion-item--active\"\r\n                    : \"suggestion-item\";\r\n\r\n                  const style = suggestion.active\r\n                    ? {\r\n                        backgroundColor: \"rgb(202, 202, 202)\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\r\n\r\n                  return (\r\n                    <div\r\n                      className='autocomplete-dropdown'\r\n                      style={{}}\r\n                      {...getSuggestionItemProps(suggestion, {\r\n                        className,\r\n                        style,\r\n                      })}\r\n                      key={suggestion.description}\r\n                      name='fullAddress'\r\n                    >\r\n                      <span> {suggestion.description} </span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </PlacesAutocomplete>\r\n      <div className='form-item' style={{ margin: \"1rem 0\", padding: 0 }}>\r\n        <TextField\r\n          value={altAddress.street}\r\n          name='street'\r\n          id='outlined-basic'\r\n          label='Street'\r\n          variant='outlined'\r\n          style={{ width: \"70%\" }}\r\n          autoComplete='new-password'\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='Suite / Apt #'\r\n          variant='outlined'\r\n          value={altAddress.suite}\r\n          name='suite'\r\n          style={{ width: \"25%\" }}\r\n          autoComplete='new-password'\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n      </div>\r\n      <div className='form-item' style={{ margin: 0, padding: 0 }}>\r\n        <TextField\r\n          id='outlined-basic'\r\n          name='city'\r\n          label='City'\r\n          value={altAddress.city}\r\n          variant='outlined'\r\n          autoComplete='new-password'\r\n          onChange={(e) => handleChange(e)}\r\n          style={{ width: \"37%\" }}\r\n        />\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='State'\r\n          name='state'\r\n          value={altAddress.state}\r\n          variant='outlined'\r\n          style={{ width: \"37%\" }}\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='Zip'\r\n          name='zip'\r\n          value={altAddress.zip}\r\n          variant='outlined'\r\n          style={{ width: \"25%\" }}\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <PlacesAutocomplete\r\n        value={formData.serviceAddress.fullServiceAddress} \r\n        onChange={handleAutoChange}\r\n        onSelect={handleSelect} \r\n        style={{ width: \"100%\" }}\r\n        name='fullAddress'\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\r\n          return (\r\n            <div>\r\n              <TextField\r\n                label='Service Address'\r\n                style={{ width: \"100%\" }}\r\n                autoComplete='new-password'\r\n                name='fullAddress'\r\n                variant='outlined'\r\n                {...getInputProps({\r\n                  placeholder: \"Start Typing Service Address\",\r\n                  className: \"location-search-input\",\r\n                  autoComplete: \"new-password\",\r\n                  name: \"fullAddress\",\r\n                })}\r\n              />\r\n\r\n              <div className='autocomplete-dropdown-container'>\r\n                {loading && <div>... Loading </div>}\r\n                {suggestions.map((suggestion) => {\r\n                  const className = suggestion.active\r\n                    ? \"suggestion-item--active\"\r\n                    : \"suggestion-item\";\r\n\r\n                  const style = suggestion.active\r\n                    ? {\r\n                        backgroundColor: \"rgb(202, 202, 202)\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\r\n\r\n                  return (\r\n                    <div\r\n                      className='autocomplete-dropdown'\r\n                      style={{}}\r\n                      {...getSuggestionItemProps(suggestion, {\r\n                        className,\r\n                        style,\r\n                      })}\r\n                      key={suggestion.description}\r\n                      name='fullAddress'\r\n                    >\r\n                      <span> {suggestion.description} </span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </PlacesAutocomplete>\r\n      <div className='form-item' style={{ margin: \"1rem 0\", padding: 0 }}>\r\n        <TextField\r\n          value={street}\r\n          name='street'\r\n          id='outlined-basic'\r\n          label='Street'\r\n          variant='outlined'\r\n          style={{ width: \"70%\" }}\r\n          autoComplete='new-password'\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='Suite / Apt #'\r\n          variant='outlined'\r\n          value={suite}\r\n          name='suite'\r\n          style={{ width: \"25%\" }}\r\n          autoComplete='new-password'\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n      </div>\r\n      <div className='form-item' style={{ margin: 0, padding: 0 }}>\r\n        <TextField\r\n          id='outlined-basic'\r\n          name='city'\r\n          label='City'\r\n          value={city}\r\n          variant='outlined'\r\n          autoComplete='new-password'\r\n          onChange={(e) => handleChange(e)}\r\n          style={{ width: \"37%\" }}\r\n        />\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='State'\r\n          name='state'\r\n          value={state}\r\n          variant='outlined'\r\n          style={{ width: \"37%\" }}\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='Zip'\r\n          name='zip'\r\n          value={zip}\r\n          variant='outlined'\r\n          style={{ width: \"25%\" }}\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n      </div>\r\n      {addAddressBtn && addtionalAddress}\r\n      <Button\r\n        onClick={(e) => btnClickHandler(e)}\r\n        style={{ marginTop: \".51rem\" }}\r\n      >\r\n        {!addAddressBtn\r\n          ? \" Add Additional Address\"\r\n          : \"Remove Additional Address\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlacesAutocompleteComponent;\r\n","C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Components\\Jobs\\FileDropForm.js",["122","123","124","125","126","127"],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\store.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Reducer\\addjobFormReducer.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\constants\\addJobConstants.js",[],"C:\\Users\\Kyles PC\\Desktop\\Coding\\serveasap\\src\\Actions\\addjobActions.js",["128","129","130","131"],"import {\r\n  ADD_JOB_FORM_DATA,\r\n  ADD_JOB_FORM_SERVICE_DOCUMENTS_DESCRIPTION,\r\n  ADD_JOB_FORM_CASENUMBER,\r\n  ADD_JOB_FORM_CLIENTNAME,\r\n} from \"../constants/addJobConstants\";\r\n\r\n\r\nexport const setFormData= (info, TYPE) => async(dispatch) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: TYPE,\r\n            payload: info,\r\n        })\r\n        \r\n    } catch (error) {\r\n        /// DISPATCH ERROR \r\n    }\r\n\r\n\r\n\r\n}",{"ruleId":"132","severity":1,"message":"133","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"136","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":15},{"ruleId":"132","severity":1,"message":"137","line":11,"column":10,"nodeType":"134","messageId":"135","endLine":11,"endColumn":16},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"132","severity":1,"message":"142","line":19,"column":11,"nodeType":"134","messageId":"135","endLine":19,"endColumn":22},{"ruleId":"132","severity":1,"message":"143","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":37},{"ruleId":"132","severity":1,"message":"144","line":7,"column":16,"nodeType":"134","messageId":"135","endLine":7,"endColumn":22},{"ruleId":"132","severity":1,"message":"145","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"146","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":12},{"ruleId":"132","severity":1,"message":"145","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"147","line":28,"column":8,"nodeType":"134","messageId":"135","endLine":28,"endColumn":14},{"ruleId":"148","severity":1,"message":"149","line":191,"column":17,"nodeType":"150","endLine":191,"endColumn":46},{"ruleId":"148","severity":1,"message":"149","line":241,"column":15,"nodeType":"150","endLine":241,"endColumn":47},{"ruleId":"132","severity":1,"message":"151","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":17},{"ruleId":"132","severity":1,"message":"152","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":12},{"ruleId":"132","severity":1,"message":"153","line":79,"column":10,"nodeType":"134","messageId":"135","endLine":79,"endColumn":14},{"ruleId":"132","severity":1,"message":"154","line":79,"column":16,"nodeType":"134","messageId":"135","endLine":79,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":109,"column":6,"nodeType":"157","endLine":109,"endColumn":43,"suggestions":"158"},{"ruleId":"148","severity":1,"message":"149","line":184,"column":15,"nodeType":"150","endLine":184,"endColumn":48},{"ruleId":"148","severity":1,"message":"149","line":186,"column":15,"nodeType":"150","endLine":186,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"159","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":20},{"ruleId":"132","severity":1,"message":"160","line":23,"column":19,"nodeType":"134","messageId":"135","endLine":23,"endColumn":29},{"ruleId":"132","severity":1,"message":"161","line":60,"column":13,"nodeType":"134","messageId":"135","endLine":60,"endColumn":20},{"ruleId":"132","severity":1,"message":"162","line":123,"column":11,"nodeType":"134","messageId":"135","endLine":123,"endColumn":29},{"ruleId":"132","severity":1,"message":"163","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":17},{"ruleId":"132","severity":1,"message":"164","line":17,"column":10,"nodeType":"134","messageId":"135","endLine":17,"endColumn":20},{"ruleId":"132","severity":1,"message":"165","line":19,"column":10,"nodeType":"134","messageId":"135","endLine":19,"endColumn":23},{"ruleId":"132","severity":1,"message":"166","line":19,"column":25,"nodeType":"134","messageId":"135","endLine":19,"endColumn":41},{"ruleId":"167","severity":1,"message":"168","line":97,"column":11,"nodeType":"169","endLine":97,"endColumn":15},{"ruleId":"148","severity":1,"message":"149","line":116,"column":13,"nodeType":"150","endLine":116,"endColumn":31},{"ruleId":"132","severity":1,"message":"170","line":2,"column":3,"nodeType":"134","messageId":"135","endLine":2,"endColumn":20},{"ruleId":"132","severity":1,"message":"171","line":3,"column":3,"nodeType":"134","messageId":"135","endLine":3,"endColumn":45},{"ruleId":"132","severity":1,"message":"172","line":4,"column":3,"nodeType":"134","messageId":"135","endLine":4,"endColumn":26},{"ruleId":"132","severity":1,"message":"173","line":5,"column":3,"nodeType":"134","messageId":"135","endLine":5,"endColumn":26},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'alpha' is defined but never used.","'Helmet' is defined but never used.","no-native-reassign",["174"],"no-negated-in-lhs",["175"],"'currentPage' is assigned a value but never used.","'useReducer' is defined but never used.","'purple' is defined but never used.","'useState' is defined but never used.","'Icon' is defined but never used.","'Button' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'dashboard' is defined but never used.","'flag' is defined but never used.","'rows' is assigned a value but never used.","'setRows' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleInvoice'. Either include it or remove the dependency array.","ArrayExpression",["176"],"'Autocomplete' is defined but never used.","'setAddress' is assigned a value but never used.","'latLang' is assigned a value but never used.","'fullServiceAddress' is assigned a value but never used.","'TextField' is defined but never used.","'otherFiles' is assigned a value but never used.","'numberOfFiles' is assigned a value but never used.","'setNumberOfFiles' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'ADD_JOB_FORM_DATA' is defined but never used.","'ADD_JOB_FORM_SERVICE_DOCUMENTS_DESCRIPTION' is defined but never used.","'ADD_JOB_FORM_CASENUMBER' is defined but never used.","'ADD_JOB_FORM_CLIENTNAME' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},"Update the dependencies array to be: [service, jobDescription, value, qty, handleInvoice]",{"range":"179","text":"180"},[3261,3298],"[service, jobDescription, value, qty, handleInvoice]"]